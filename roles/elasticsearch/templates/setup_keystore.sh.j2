#!/bin/bash

export ES_HOME={{ elasticsearch_extract_dir }}/elasticsearch
export ES_PATH_CONF={{ elasticsearch_conf_dir }}

KEYSTORE_FILE={{ elasticsearch_conf_dir }}/elasticsearch.keystore

# Compute the hash of the current password file
CURRENT_HASH=$(sha256sum /tmp/elastic_password_file.txt | awk '{print $1}')

# If the hash file exists and its content matches the current hash, skip keystore update
if [ -f /tmp/elastic_password_file.txt.hash ] && [[ "$CURRENT_HASH" == $(cat /tmp/elastic_password_file.txt.hash) ]]; then
    exit 0
else
    echo "$CURRENT_HASH" > /tmp/elastic_password_file.txt.hash
fi

if [ ! -f $KEYSTORE_FILE ]; then
    {{ elasticsearch_extract_dir }}/elasticsearch/bin/elasticsearch-keystore create
fi

KEYSTORE_PW=$(grep keystore_pw /tmp/elastic_password_file.txt | awk '{print $1}')
TRUSTORE_PW=$(grep truststore_pw /tmp/elastic_password_file.txt | awk '{print $1}')
HTTP_PW=$(grep http_pw /tmp/elastic_password_file.txt | awk '{print $1}')
BOOTSTRAP_PW=$(grep bootstrap_pw /tmp/elastic_password_file.txt | awk '{print $1}')

echo "$KEYSTORE_PW" | {{ elasticsearch_extract_dir }}/elasticsearch/bin/elasticsearch-keystore add -x -f xpack.security.transport.ssl.keystore.secure_password
echo "$TRUSTORE_PW" | {{ elasticsearch_extract_dir }}/elasticsearch/bin/elasticsearch-keystore add -x -f xpack.security.transport.ssl.truststore.secure_password
echo "$HTTP_PW" | {{ elasticsearch_extract_dir }}/elasticsearch/bin/elasticsearch-keystore add -x -f xpack.security.http.ssl.keystore.secure_password
echo "$BOOTSTRAP_PW" | {{ elasticsearch_extract_dir }}/elasticsearch/bin/elasticsearch-keystore add -x -f bootstrap.password
exit 1