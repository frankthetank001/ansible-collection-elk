---

- name: Install certbot (Debian-based systems)
  ansible.builtin.apt:
    name: certbot
    state: present
  when: ansible_os_family == 'Debian'
  become: true

- name: Install certbot (RedHat-based systems)
  ansible.builtin.yum:
    name: certbot
    state: present
  when: ansible_os_family == 'RedHat'
  become: true

- name: Check if certificate exists
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
  loop: "{{ elasticsearch_hosts }}"
  register: cert_exists

- name: Request HTTPS certificate if not present
  ansible.builtin.command:
    cmd: "certbot certonly --standalone -d {{ item[0] }} --register-unsafely-without-email --agree-tos"
  loop: "{{ elasticsearch_hosts | zip(cert_exists.results) | list }}"
  when: not item[1].stat.exists
  loop_control:
    label: "{{ item[0] }}"
  become: true

- name: Create PKCS12 file for each elasticsearch host
  ansible.builtin.command:
    cmd: > 
      openssl pkcs12 -export 
      -in /etc/letsencrypt/live/{{ item }}/fullchain.pem
      -inkey /etc/letsencrypt/live/{{ item }}/privkey.pem
      -out /tmp/{{ item }}.p12
      -name elasticsearch -passout pass:{{ elasticsearch_cert_password }}
  loop: "{{ elasticsearch_hosts }}"
  become: true

- name: Copy the PKCS12 file to Elasticsearch certs directory (client https)
  ansible.builtin.copy:
    src: "/tmp/{{ elasticsearch_hosts[index] }}.p12"
    dest: "{{ elasticsearch_certs_dir }}/{{ elasticsearch_cert_filename }}"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: 0644
  # when: >
  #   not item.stat.exists
  loop: "{{ cert_exists.results }}"
  loop_control:
    index_var: index
  become: true
  notify:
    - check if elasticsearch is active
    - restart elasticsearch
    - wait elasticsearch to be ready

- name: Copy the PKCS12 file to Elasticsearch certs directory (node https)
  ansible.builtin.copy:
    src: "/tmp/{{ elasticsearch_hosts[index] }}.p12"
    dest: "{{ elasticsearch_certs_dir }}/http.p12"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: 0644
  # when: >
  #   not item.stat.exists
  loop: "{{ cert_exists.results }}"
  loop_control:
    index_var: index
  become: true
  notify:
    - check if elasticsearch is active
    - restart elasticsearch
    - wait elasticsearch to be ready

- name: Clean up temporary PKCS12 files
  ansible.builtin.file:
    path: "/tmp/{{ item }}.p12"
    state: absent
  loop: "{{ elasticsearch_hosts }}"
  become: true

- name: Copy the trusted CA to the elasticsearch config directory
  ansible.builtin.copy:
    src: "{{ elasticsearch_local_certs_dir }}/{{item}}"
    dest: "{{ elasticsearch_certs_dir }}/{{ item }}"
  loop: "{{ elasticsearch_certificate_authorities }}"
  become: true

- name: Create certbot post renewal hook
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      DOMAIN=$1

      # Create PKCS12 file
      openssl pkcs12 -export \
        -in /etc/letsencrypt/live/$DOMAIN/fullchain.pem \
        -inkey /etc/letsencrypt/live/$DOMAIN/privkey.pem \
        -out /tmp/$DOMAIN.p12 \
        -name elasticsearch -passout pass:{{ elasticsearch_cert_password }}

      # Copy the PKCS12 file to Elasticsearch certs directory
      cp /tmp/$DOMAIN.p12 {{ elasticsearch_certs_dir }}/{{ elasticsearch_cert_filename }}.p12
      cp /tmp/$DOMAIN.p12 {{ elasticsearch_certs_dir }}/http.p12

      # Cleanup
      rm -f /tmp/$DOMAIN.p12

      # Restart Elasticsearch service
      systemctl restart elasticsearch
    dest: "/etc/letsencrypt/renewal-hooks/post/elasticsearch-renewal.sh"
    mode: '0755'
  become: true

# Ensure certbot timer is active and running
- name: Ensure certbot timer is active and running
  ansible.builtin.systemd:
    name: certbot.timer
    state: started
    enabled: true
  become: true