---

- set_fact:
    virtual_proto: "{{ 'https' if elasticsearch_https_enabled else 'http' }}"

- name: Create logstash_writer role
  ansible.builtin.uri:
    url: "{{ virtual_proto }}://localhostelasticsearch_http_port/_security/role/logstash_writer"
    user: elastic
    password: "{{ elasticsearch_users['elastic']['password'] }}"
    method: PUT
    body:
      cluster: ["monitor", "manage_index_templates", "manage_ingest_pipelines"]  # Cluster level permissions
      indices:
        - names: ["*"]  # Adjust as necessary
          privileges: ["write", "create", "delete", "create_index", "manage", "read"]  # Index level permissions
    force_basic_auth: yes
    validate_certs: no
    status_code: 200
    body_format: json
  run_once: true

- name: Create and assign logstash_writer role to logstash_user
  ansible.builtin.uri:
    url: "{{ virtual_proto }}://localhostelasticsearch_http_port/_security/user/logstash_user"
    user: elastic
    password: "{{ elasticsearch_users['elastic']['password'] }}"
    method: POST
    body:
      password: "{{ elasticsearch_users['logstash_user']['password'] }}"
      roles: ["logstash_writer"]
      full_name: "Logstash User"
    force_basic_auth: yes
    validate_certs: no
    status_code: 200
    body_format: json
  run_once: true

- name: Setup ELK users
  ansible.builtin.uri:
    url: "{{ virtual_proto }}://localhostelasticsearch_http_port/_security/user/{{ item.key }}/_password"
    user: elastic
    password: "{{ elasticsearch_users['elastic']['password'] }}"
    method: POST
    body: {"password" : "{{ item.value.password }}"}
    force_basic_auth: yes
    validate_certs: no
    status_code: 200
    body_format: json
  with_dict: "{{ elasticsearch_users }}"
  when: item.key != "elastic"
  run_once: true