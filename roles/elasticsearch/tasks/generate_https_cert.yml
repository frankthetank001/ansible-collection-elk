---

- name: cert HTTPS exists (on source machine)
  stat:
    path: "{{ elasticsearch_local_certs_dir }}/http.p12"
  register: https_file_local

- name: Get checksum of source file
  ansible.builtin.stat:
    path: "{{ elasticsearch_local_certs_dir }}/http.p12"
  register: source_https_file_stat
  when: https_file_local.stat.exists

- name: cert HTTPS exists (on target machine)
  stat:
    path: "{{ elasticsearch_certs_dir }}/http.p12"
  register: https_file

- name: Get checksum of destination https file
  ansible.builtin.stat:
    path: "{{ elasticsearch_certs_dir }}/http.p12"
  register: dest_https_file_stat
  when: https_file.stat.exists

- name: generate HTTPS answer file
  ansible.builtin.template:
    src: https_answer_file.txt.j2
    dest: /tmp/https_answer_file.txt
    mode: 0400
  when: not https_file.stat.exists

- name: generate HTTPS cert script
  ansible.builtin.template:
    src: generate_https_certs.sh.j2
    dest: "/usr/local/sbin/generate_https_certs.sh"
    mode: 0700

- name: Remove HTTPS zip file (cleanup)
  ansible.builtin.file:
    path: "{{ elasticsearch_http_file }}"
    state: absent

- name: Remove HTTPS temp dir (cleanup)
  ansible.builtin.file:
    path: /tmp/elasticsearch
    state: absent

- name: Remove HTTPS temp dir (cleanup)
  ansible.builtin.file:
    path: /tmp/kibana
    state: absent

- name: generate HTTPS cert
  ansible.builtin.command: > 
    /usr/local/sbin/generate_https_certs.sh
  when: not https_file.stat.exists

- name: Remove answer file
  ansible.builtin.file:
    path: /tmp/https_answer_file.txt
    state: absent

- name: Unarchive HTTPS zip file
  ansible.builtin.unarchive:
    src: "{{ elasticsearch_http_file }}"
    dest: /tmp/
    remote_src: yes
  when: not https_file.stat.exists

- name: Copy http.p12 file in cert dir
  ansible.builtin.copy:
    src: "{{ elasticsearch_local_certs_dir }}/http.p12"
    dest: "{{ elasticsearch_certs_dir }}/http.p12"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    #remote_src: yes
  when: https_file_local.stat.exists and (source_https_file_stat.stat.checksum != dest_https_file_stat.stat.checksum or not dest_https_file_stat.stat.exists)
  notify: restart elasticsearch

- ansible.builtin.fetch:
    src: /tmp/kibana/elasticsearch-ca.pem
    dest: "{{ elasticsearch_local_certs_dir }}/elasticsearch-ca.pem"
    flat: true
  run_once: true
  when: https_file_local.stat.exists and (source_https_file_stat.stat.checksum != dest_https_file_stat.stat.checksum or not dest_https_file_stat.stat.exists)
  notify: restart elasticsearch

- name: Remove HTTPS zip file
  ansible.builtin.file:
    path: "{{ elasticsearch_http_file }}"
    state: absent

- name: Remove HTTPS temp dir
  ansible.builtin.file:
    path: /tmp/elasticsearch
    state: absent

- name: Remove HTTPS temp dir
  ansible.builtin.file:
    path: /tmp/kibana
    state: absent
