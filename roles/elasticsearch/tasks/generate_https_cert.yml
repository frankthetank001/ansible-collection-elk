---

- name: CA exists
  stat:
    path: "{{ elasticsearch_certs_dir}}/{{ elasticsearch_ca_filename }}"
  register: ca_file

- name: cert HTTPS exists
  stat:
    path: "{{ elasticsearch_certs_dir}}/http.p12"
  register: https_file

- name: Get issuer of the http.p12 certificate
  shell: "openssl pkcs12 -in {{ elasticsearch_certs_dir }}/http.p12 -passin pass:{{ elasticsearch_cert_password }} -nokeys -clcerts | openssl x509 -noout -issuer"
  register: https_issuer
  changed_when: false
  ignore_errors: true
  when: https_file.stat.exists and ca_file.stat.exists

- name: Get subject of the CA
  shell: "openssl pkcs12 -in {{ elasticsearch_certs_dir }}/{{ elasticsearch_ca_filename }} -passin pass:{{ elasticsearch_ca_password }} -nokeys -clcerts | openssl x509 -noout -subject"
  register: ca_subject
  changed_when: false
  ignore_errors: true
  when: https_file.stat.exists and ca_file.stat.exists

- name: Set fact for https cert issued by CA
  set_fact:
    https_cert_issued_by_ca: "{{ https_issuer.stdout == ca_subject.stdout }}"
  when: 
    - https_issuer.stdout is defined 
    - ca_subject.stdout is defined

- name: generate HTTPS answer file
  ansible.builtin.template:
    src: https_answer_file.txt.j2
    dest: /tmp/https_answer_file.txt
    mode: 0400
  when: not https_file.stat.exists

- name: generate HTTPS cert script
  ansible.builtin.template:
    src: generate_https_certs.sh.j2
    dest: "/usr/local/sbin/generate_https_certs.sh"
    mode: 0700

- name: Remove HTTPS zip file (cleanup)
  ansible.builtin.file:
    path: "{{ elasticsearch_http_file }}"
    state: absent

- name: Remove HTTPS temp dir (cleanup)
  ansible.builtin.file:
    path: /tmp/elasticsearch
    state: absent

- name: Remove HTTPS temp dir (cleanup)
  ansible.builtin.file:
    path: /tmp/kibana
    state: absent

- name: Remove existing http cert if not issued by correct CA
  ansible.builtin.file:
    path: "{{ elasticsearch_certs_dir}}/http.p12"
    state: absent
  when: https_file.stat.exists and not https_cert_issued_by_ca

- name: generate HTTPS cert
  ansible.builtin.command: > 
    /usr/local/sbin/generate_https_certs.sh
  when: 
    - not https_file.stat.exists or not https_cert_issued_by_ca
  notify:
    - check if elasticsearch is active
    - restart elasticsearch
    - wait elasticsearch to be ready

- name: Remove answer file
  ansible.builtin.file:
    path: /tmp/https_answer_file.txt
    state: absent

- name: Unarchive HTTPS zip file
  ansible.builtin.unarchive:
    src: "{{ elasticsearch_http_file }}"
    dest: /tmp/
    remote_src: yes
  when: not https_file.stat.exists or not https_cert_issued_by_ca

- name: Copy http.p12 file in cert dir
  ansible.builtin.copy:
    src: /tmp/elasticsearch/http.p12
    dest: "{{ elasticsearch_certs_dir }}/http.p12"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    remote_src: yes
  when: not https_file.stat.exists or not https_cert_issued_by_ca

- ansible.builtin.fetch:
    src:  /tmp/kibana/elasticsearch-ca.pem
    dest: "{{ elasticsearch_local_certs_dir }}/elasticsearch-ca.pem"
    flat: true
  run_once: true
  when: not https_file.stat.exists

- name: Remove HTTPS zip file
  ansible.builtin.file:
    path: "{{ elasticsearch_http_file }}"
    state: absent

- name: Remove HTTPS temp dir
  ansible.builtin.file:
    path: /tmp/elasticsearch
    state: absent

- name: Remove HTTPS temp dir
  ansible.builtin.file:
    path: /tmp/kibana
    state: absent