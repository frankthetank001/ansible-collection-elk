- name: Check if transform exists
  ansible.builtin.uri:
    url: "{{ virtual_proto }}://{{ elasticsearch_http_host | default('localhost') }}:{{ elasticsearch_http_port }}/_transform/{{ transform_item | basename | regex_replace('\\.json\\.j2$', '') }}"
    user: elastic
    password: "{{ elasticsearch_users['elastic']['password'] }}"
    method: GET
    force_basic_auth: yes
    validate_certs: no
    status_code: [200, 404]  # 200 if exists, 404 if not
  register: transform_check
  loop_control:
    loop_var: transform_item
  with_fileglob:
    - "{{ role_path }}/templates/transforms/*.json.j2"
  run_once: true
  delegate_to: localhost

- name: Create transforms
  ansible.builtin.uri:
    url: "{{ virtual_proto }}://{{ elasticsearch_http_host | default('localhost') }}:{{ elasticsearch_http_port }}/_transform/{{ transform_result.transform_item | basename | regex_replace('\\.json\\.j2$', '') }}"
    user: elastic
    password: "{{ elasticsearch_users['elastic']['password'] }}"
    method: PUT
    body: "{{ lookup('template', transform_result.transform_item) }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: [200]  # Expect 200 OK if created, 400 if already exists
    body_format: json
  when: transform_result.status == 404  # Run only if transform does not exist
  loop: "{{ transform_check.results }}"
  loop_control:
    loop_var: transform_result
  delegate_to: localhost

- name: Start transforms
  ansible.builtin.uri:
    url: "{{ virtual_proto }}://{{ elasticsearch_http_host | default('localhost') }}:{{ elasticsearch_http_port }}/_transform/{{ transform_result.transform_item | basename | regex_replace('\\.json\\.j2$', '') }}/_start"
    user: elastic
    password: "{{ elasticsearch_users['elastic']['password'] }}"
    method: POST
    force_basic_auth: yes
    validate_certs: no
    status_code: [200, 409]  # Expect 200 OK if started, 409 if already running
  loop: "{{ transform_check.results }}"
  loop_control:
    loop_var: transform_result
  delegate_to: localhost