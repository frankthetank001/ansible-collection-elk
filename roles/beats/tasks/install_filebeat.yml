---

- name: CA exists
  stat:
    path: "{{ filebeat_certs_dir }}/{{ elasticsearch_ca_chain_name }}"
  register: elastic_ca_file

- shell: uname -s
  register: unames

- shell: uname -m
  register: unamem

- name: is filebeat installed
  stat:
    path: "{{ beats_extract_dir }}/filebeat-{{ beats_version }}-{{ unames.stdout | lower }}-{{ unamem.stdout }}"
  register: filebeat_dir

- name: Download and extract filebeat
  ansible.builtin.unarchive:
    src: https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{{ beats_version }}-{{ unames.stdout | lower }}-{{ unamem.stdout }}.tar.gz
    dest: "{{ beats_extract_dir }}"
    owner: "{{ beats_user }}"
    group: "{{ beats_group }}"
    remote_src: yes
  when: not filebeat_dir.stat.exists

- name: create symlink to filebeat
  ansible.builtin.file:
    src: "{{ beats_extract_dir }}/filebeat-{{ beats_version }}-{{ unames.stdout | lower }}-{{ unamem.stdout }}"
    dest: "{{ beats_extract_dir }}/filebeat"
    state: link
    owner: "{{ beats_user }}"
    group: "{{ beats_group }}"

- name: Fix directory and file permissions
  ansible.builtin.find:
    paths:
      - "{{ filebeat_conf_dir }}"
      - "{{ filebeat_data_dir }}"
      - "{{ filebeat_log_dir }}"
      - "{{ filebeat_certs_dir }}"
    recurse: yes
  register: found_files

- name: Set directory and file permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "{{ item.isdir | ternary('directory', 'file') }}"
    owner: "{{ beats_user }}"
    group: "{{ beats_group }}"
    mode: "{{ item.mode }}"
  loop: "{{ found_files.files }}"
  when: 
    - item.path.stat.pw_name != beats_user
    - item.path.stat.gr_name != beats_group
    - item.path.stat.mode != (item.isdir | ternary('755', '644'))  # Adjust the modes as needed

- name: Copy modules.d directory
  ansible.posix.synchronize:
    src: "{{ beats_extract_dir }}/filebeat/modules.d"
    dest: "{{ filebeat_conf_dir }}/"
    owner: yes
    group: yes
  delegate_to: "{{ inventory_hostname }}"

- set_fact:
    elastic_virtual_proto: "{{ 'https' if elasticsearch_https_enabled else 'http' }}"

- name: Copy elastic CA
  ansible.builtin.copy:
    src: "{{ elasticsearch_local_certs_dir }}/{{ elasticsearch_ca_chain_name }}"
    dest: "{{ filebeat_certs_dir }}/{{ elasticsearch_ca_chain_name }}"
    owner: "{{ beats_user }}"
    group: "{{ beats_group }}"
    mode: 0644
  when: 
    - elasticsearch_https_enabled
    - not elastic_ca_file.stat.exists or elastic_ca_file.stat.checksum != (lookup('file', filebeat_certs_dir + "/" + elasticsearch_ca_chain_name) | hash('sha256'))
  notify:
    - check if filebeat is active
    - reload filebeat

- ansible.builtin.fail:
    msg: no elasticsearch_hosts specified
  when:
    - elasticsearch_hosts | length == 0

- ansible.builtin.fail:
    msg: setup_kibana_dashboards set to true but no kibana_url specified
  when:
    - setup_kibana_dashboards
    - kibana_url == ''

- name: Render filebeat configuration file
  ansible.builtin.template:
    src: filebeat/filebeat.yml.j2
    dest: "{{ filebeat_conf_dir }}/filebeat.yml"
    owner: "{{ beats_user }}"
    group: "{{ beats_group }}"
    mode: 0640
  notify:
    - check if filebeat is active
    - reload filebeat

- name: Render filebeat service file
  ansible.builtin.template:
    src: filebeat/filebeat.service.j2
    dest: /etc/systemd/system/filebeat.service
    mode: 0644
  notify:
    - reload systemd

- set_fact:
    setup_params: "{{ '--dashboards --index-management --pipelines' if setup_kibana_dashboards else '--pipelines --index-management' }}"

- name: filebeat setup
  ansible.builtin.command: > 
    su - {{ beats_user }} -c "{{ beats_extract_dir }}/filebeat/filebeat -c {{ filebeat_conf_dir }}/filebeat.yml setup -e {{ setup_params }}"
  run_once: true
  when: not filebeat_dir.stat.exists

- name: enable and start filebeat
  ansible.builtin.systemd:
    name: filebeat 
    state: started 
    enabled: yes
  register: filebeat_service