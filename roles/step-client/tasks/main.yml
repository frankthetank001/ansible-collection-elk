---
- name: Check if step CLI exists
  stat:
    path: /usr/bin/step
  register: step_binary

- name: Download and install step CLI
  get_url:
    url: "{{ step_cli_url }}"
    dest: /usr/bin/step
    mode: '0755'
  when: not step_binary.stat.exists

- name: Download root certificate
  get_url:
    url: "{{ root_ca_url }}"
    dest: /tmp/root.crt
    validate_certs: no

- name: Get home directory of the current user
  set_fact:
    user_home: "{{ ansible_env.HOME }}"

- name: Check if root_ca.crt exists in the current user's home directory
  stat:
    path: "{{ user_home }}/.step/certs/root_ca.crt"
  register: root_ca_check
  changed_when: false

- name: Get fingerprint of existing root_ca.crt
  command: step certificate fingerprint {{ user_home }}/.step/certs/root_ca.crt
  register: existing_fingerprint
  when: root_ca_check.stat.exists
  changed_when: false

- name: Get fingerprint of /tmp/root.crt
  command: step certificate fingerprint /tmp/root.crt
  register: tmp_fingerprint
  changed_when: false

- name: Bootstrap the CA
  command: >
    step ca bootstrap --ca-url {{ ca_server_url }}
    --fingerprint {{ tmp_fingerprint.stdout }} --force
  when: not root_ca_check.stat.exists or (tmp_fingerprint.stdout != existing_fingerprint.stdout)

- name: Create password file
  copy:
    content: "{{ step_password }}"
    dest: "{{ password_file }}"
    mode: '0600'
  when: step_password is defined
  changed_when: false

- name: Check if client certificate exists
  stat:
    path: "{{ logstash_certs_dir }}/logstash.pem"
  register: client_cert

- name: Get certificate end date
  shell: >
    openssl x509 -enddate -noout -in {{ logstash_certs_dir }}/logstash.pem | cut -d= -f2-
  register: cert_end_date_raw
  when: client_cert.stat.exists
  changed_when: false

- name: Convert certificate end date to epoch
  set_fact:
    cert_end_epoch: "{{ (cert_end_date_raw.stdout | to_datetime('%b %d %H:%M:%S %Y %Z')).strftime('%s') }}"
  when: client_cert.stat.exists

- name: Determine if certificate is still valid
  set_fact:
    cert_is_valid: "{{ (ansible_date_time.epoch | int) < (cert_end_epoch | int) }}"
  when: client_cert.stat.exists

- name: Register a client certificate
  command: >
    step ca certificate logstash {{ logstash_certs_dir }}/logstash.pem 
    {{ logstash_certs_dir }}/logstash.key --provisioner-password-file {{ password_file }}
    --force --provisioner step --not-after=168h
  vars:
    ansible_become: yes
  when: step_password is defined and (not client_cert.stat.exists or not cert_is_valid)
  notify:
    - check if logstash is active
    - restart logstash

- name: Remove password file
  file:
    path: "{{ password_file }}"
    state: absent
  changed_when: false

- name: Stat and adjust permissions for cert and key
  block:
    - name: Stat files
      stat:
        path: "{{ item.path }}"
      register: stat_result
      loop:
        - { name: 'certificate', path: "{{ logstash_certs_dir }}/{{ logstash_mqtt_client_cert }}", mode: '0644' }
        - { name: 'key', path: "{{ logstash_certs_dir }}/{{ logstash_mqtt_client_key }}", mode: '0600' }
      loop_control:
        label: "{{ item.name }}"

    - name: Adjust file permissions
      file:
        path: "{{ item.item.path }}"
        owner: "{{ logstash_user }}"
        group: "{{ logstash_group }}"
        mode: "{{ item.item.mode }}"
      when: item.stat.exists
      loop: "{{ stat_result.results }}"
      loop_control:
        label: "{{ item.item.name }}"

- name: Deploy cert-renewer@.service systemd unit
  template:
    src: cert-renewer@.service.j2
    dest: /etc/systemd/system/cert-renewer@.service
    mode: '0644'

- name: Deploy cert-renewer@.timer systemd unit
  template:
    src: cert-renewer@.timer.j2
    dest: /etc/systemd/system/cert-renewer@.timer
    mode: '0644'

- name: Start renewal services
  systemd:
    name: cert-renewer@logstash.service
    state: started
    enabled: yes

- name: Enable automatic renewal
  systemd:
    name: cert-renewer@logstash.timer
    state: started
    enabled: yes