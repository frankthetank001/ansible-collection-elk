#!/bin/bash

export LOGSTASH_HOME=/opt/logstash
export LOGSTASH_CONF={{ logstash_conf_dir }}

source {{ logstash_env_file[ansible_os_family] }}

KEYSTORE_FILE=$LOGSTASH_CONF/logstash.keystore

# Check if keystore file exists, if not, create it.
if [ ! -f $KEYSTORE_FILE ]; then
    echo "Creating keystore..."
    $LOGSTASH_HOME/bin/logstash-keystore --path.settings $LOGSTASH_CONF create
fi

# Extract the values from /tmp/password_file.txt
ES_USER=$(cat /tmp/password_file.txt | grep elasticsearch_user | awk '{print $1}')
ES_PWD=$(cat /tmp/password_file.txt | grep elasticsearch_password | awk '{print $1}')

# Add the values to the keystore using expect to handle prompts
/usr/bin/expect <<EOD
spawn $LOGSTASH_HOME/bin/logstash-keystore --path.settings $LOGSTASH_CONF add ES_USER
set timeout 20
expect {
    timeout { send_user "Timeout reached for ES_USER!\n"; exit 1 }
    "ES_USER already exists." {
        send "y\r"
        expect "Enter value for ES_USER:"
        send "$ES_USER\r"
        exp_continue
    }
    "Enter value for ES_USER:" {
        send "$ES_USER\r"
        exp_continue
    }
    eof
}
EOD

/usr/bin/expect <<EOD
spawn $LOGSTASH_HOME/bin/logstash-keystore --path.settings $LOGSTASH_CONF add ES_PWD
set timeout 20
expect {
    timeout { send_user "Timeout reached for ES_PWD!\n"; exit 1 }
    "ES_PWD already exists." {
        send "y\r"
        expect "Enter value for ES_PWD:"
        send "$ES_PWD\r"
        exp_continue
    }
    "Enter value for ES_PWD:" {
        send "$ES_PWD\r"
        exp_continue
    }
    eof
}
EOD