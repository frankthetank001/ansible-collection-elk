#!/bin/bash

export LOGSTASH_HOME=/opt/logstash
export LOGSTASH_CONF={{ logstash_conf_dir }}

source {{ logstash_env_file[ansible_os_family] }}
export LOGSTASH_KEYSTORE_PASS=$LOGSTASH_KEYSTORE_PASS

KEYSTORE_FILE=$LOGSTASH_CONF/logstash.keystore
CURRENT_HASH=$(sha256sum /tmp/logstash_password_file.txt | awk '{print $1}')

# If the keystore file doesn't exist, create it.
if [ ! -f $KEYSTORE_FILE ]; then
    echo "Creating keystore..."
    $LOGSTASH_HOME/bin/logstash-keystore --path.settings $LOGSTASH_CONF create
else
    # If the keystore file exists and the hash of the password file matches the saved hash, exit without updating.
    if [ -f /tmp/logstash_password_file.txt.hash ] && [[ "$CURRENT_HASH" == $(cat /tmp/logstash_password_file.txt.hash) ]]; then
        exit 0
    fi
fi

# Update the hash file with the current hash
echo "$CURRENT_HASH" > /tmp/logstash_password_file.txt.hash

# Extract the values from /tmp/logstash_password_file.txt
ES_USER=$(grep elasticsearch_user /tmp/logstash_password_file.txt | awk '{print $1}')
ES_PWD=$(grep elasticsearch_password /tmp/logstash_password_file.txt | awk '{print $1}')

# Add the values to the keystore using expect to handle prompts.
/usr/bin/expect <<EOD
spawn $LOGSTASH_HOME/bin/logstash-keystore --path.settings $LOGSTASH_CONF add ES_USER
set timeout 20
expect {
    timeout { send_user "Timeout reached for ES_USER!\n"; exit 1 }
    "ES_USER already exists." {
        send "y\r"
        expect "Enter value for ES_USER:"
        send "$ES_USER\r"
        exp_continue
    }
    "Enter value for ES_USER:" {
        send "$ES_USER\r"
        exp_continue
    }
    eof
}
EOD

/usr/bin/expect <<EOD
spawn $LOGSTASH_HOME/bin/logstash-keystore --path.settings $LOGSTASH_CONF add ES_PWD
set timeout 20
expect {
    timeout { send_user "Timeout reached for ES_PWD!\n"; exit 1 }
    "ES_PWD already exists." {
        send "y\r"
        expect "Enter value for ES_PWD:"
        send "$ES_PWD\r"
        exp_continue
    }
    "Enter value for ES_PWD:" {
        send "$ES_PWD\r"
        exp_continue
    }
    eof
}
EOD

# exit with status 1 to indicate to ansible there was a change
exit 1
