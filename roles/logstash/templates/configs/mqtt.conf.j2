input {
  {% for topic in logstash_mqtt_topics %}
  mqtt {
    host => "{{ logstash_mqtt_host }}"
    port => {{ logstash_mqtt_ssl_port }}
    logfile => "/tmp/mqtt.log"
    topic => "{{ topic }}"
    qos => 1
    type => "mqtt"
    clean_session => true
    ssl => true
    certificate_path => "{{ logstash_certs_dir }}/{{ logstash_mqtt_client_cert }}"
    key_path => "{{ logstash_certs_dir }}/{{ logstash_mqtt_client_key }}"
    root_ca_path => "{{ logstash_certs_dir }}/ca/{{ logstash_mqtt_intermediate_cert }}"
  }
  {% endfor %}
}

filter {
  if [type] == "mqtt" {
    json {
      source => "message"
    }
    date {
      match => ["timestamp", "YYYY-MM-dd HH:mm:ss"]
      target => "@timestamp"
      tag_on_failure => "_dateparsefailure"
    }
    mutate {
      remove_field => ["message", "timestamp"]
    }
    if [game_phase] {
      translate {
        source => "game_phase"
        target => "game_phase_desc"
        dictionary => {
          "0" => "IDLE"
          "1" => "IN_LOBBY"
          "2" => "BANNING_PHASE"
          "3" => "PICKING_PHASE"
          "4" => "LOADING_INTO_MATCH"
          "5" => "PREPARATION_PHASE"
          "6" => "MATCH_STARTED"
          "7" => "GAME_ENDING"
          "8" => "GAME_ENDED"
        }
        fallback => "UNKNOWN_PHASE"
      }
    }
    if [status] {
      translate {
        source => "status"
        target => "status_desc"
        dictionary => {
         "0" => "SLEEPING"
         "1" => "READY"
         "3" => "OCCUPIED"
         "4" => "STARTING"
         "5" => "QUEUED"
        }
        fallback => "UNKNOWN_STATUS"
      }
    }
    if [current_match_id] {
      mutate {
        copy => { "current_match_id" => "current_match_id_text" }
      }
    }
    if [players] and [players][0] {
      mutate {
        rename => {
          "[players][minping]" => "[Match][Player][Min_Ping]"
          "[players][avgping]" => "[Match][Player][Avg_Ping]"
          "[players][maxping]" => "[Match][Player][Max_Ping]"
          "[players][name]" => "[Match][Player][Name]"
          "[players][ip]" => "[Match][Player][IP]"
          "[players][account_id]" => "[Match][Player][Account_ID]"
          "[players][location]" => "[Match][Player][Location]"
        }
      }
    }

    mutate {
      copy => {
        "current_match_id" => "[Match][ID]"
        "svr_name" => "[Server][Name]"
        "instance_name" => "[Server][Instance]"
        "instance_id" => "[Server][Instance_ID]"
        "svr_location" => "[Server][Location]"
        "discord_id" => "[Server][Admin]"
        "svr_ip" => "[Server][IP]"
      }
    }
  }
}

output {
  if [type] == "mqtt" {
    elasticsearch {
      hosts => [{% for host in elasticsearch_hosts %}"https://{{ host }}:9200"{% if not loop.last %}, {% endif %}{% endfor %}]
      index => "mqtt"
      ssl_certificate_authorities => "{{ logstash_certs_dir }}/ca/{{ elasticsearch_ca_chain_name }}"
      user => "${ES_USER}"
      password => "${ES_PWD}"
      action => "create"
    }
  }
}