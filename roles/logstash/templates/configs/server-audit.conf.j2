input {
  exec {
    command => "/usr/bin/python3 {{ logstash_conf_dir }}/scripts/server-audit.py"
    interval => 3600
    codec => line
    add_field => { "source" => "server-audit" }
  }
}

filter {
  if [source] == "server-audit" {
    json {
      source => "message"
    }
    mutate {
      rename => { # meet the critera of my documents templating
        "ip" => "[Server][Public_IP]"
        "name" => "[Server][Name]"
      }
      add_field => {
        "autoping_description" => "%{autoping}"
        "autoping_value" => "%{autoping}"
        "api_online_description" => "%{api_online}"
        "api_online_value" => "%{api_online}"
      }
    }

    mutate {
      gsub => [
        "[Server][Name]", " 0", ""
      ]
    }

    if [autoping] {
      mutate {
        replace => {
          "autoping_description" => "Online"
          "autoping_value" => "1"
        }
      }
    } else if ![autoping] {
      mutate {
        replace => {
          "autoping_description" => "Offline"
          "autoping_value" => "0"
        }
      }
    }
    if [api_online] {
      mutate {
        replace => {
          "api_online_description" => "Online"
          "api_online_value" => "1"
        }
      }
    } else if ![api_online] {
      mutate {
        replace => {
          "api_online_description" => "Offline"
          "api_online_value" => "0"
        }
      }
    }

    if [certificate_expiry] {
      date {
        match => ["certificate_expiry", "YYYY-MM-dd HH:mm:ssZ"]
        target => "certificate_expiry"
        timezone => "UTC"
      }
    }
  }
}

output {
  if [source] == "server-audit" {
    elasticsearch {
      hosts => [{% for host in elasticsearch_hosts %}"https://{{ host }}elasticsearch_http_port"{% if not loop.last %}, {% endif %}{% endfor %}]
      index => "server-audit"  # Index-Name (?)
      ssl_certificate_authorities => "{{ logstash_certs_dir }}/ca/{{ elasticsearch_ca_chain_name }}"
      user => "${ES_USER}"
      password => "${ES_PWD}"
      action => "create"
    }
  }
}